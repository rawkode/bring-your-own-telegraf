package main

import (
	"log"
	"os"
	"text/template"
	"time"

	"github.com/influxdata/telegraf/config"
	"github.com/influxdata/telegraf/models"
	_ "github.com/influxdata/telegraf/plugins/inputs/all"
	_ "github.com/influxdata/telegraf/plugins/outputs/all"
)

func main() {
	configuration := config.NewConfig()
	err := configuration.LoadConfig("")

	if err != nil {
		die(err)
	}

	inputPlugins := configuration.Inputs
	outputPlugins := configuration.Outputs

	allInputs, err := os.Create("./plugins/inputs/all/all.go")
	die(err)
	defer allInputs.Close()

	allOutputs, err := os.Create("./plugins/outputs/all/all.go")
	die(err)
	defer allOutputs.Close()

	allPluginsTemplate.Execute(allInputs, struct {
		PluginType string
		Plugins    []*models.RunningInput
		Timestamp  time.Time
	}{
		PluginType: "inputs",
		Plugins:    inputPlugins,
		Timestamp:  time.Now(),
	})

	allPluginsTemplate.Execute(allOutputs, struct {
		PluginType string
		Plugins    []*models.RunningOutput
		Timestamp  time.Time
	}{
		PluginType: "outputs",
		Plugins:    outputPlugins,
		Timestamp:  time.Now(),
	})
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
		panic(err)
	}
}

var allPluginsTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by rawkode/telegraf:byo at
// {{ .Timestamp }}
package all

import (
{{- range .Plugins }}
    _ "github.com/influxdata/telegraf/plugins/{{ $.PluginType }}/{{ .Config.Name }}"
{{- end }}
)
`))
